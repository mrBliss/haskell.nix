diff --git a/rts/Linker.c b/rts/Linker.c
index f8af782057..7350af9ec6 100644
--- a/rts/Linker.c
+++ b/rts/Linker.c
@@ -1087,11 +1087,125 @@ resolveSymbolAddr (pathchar* buffer, int size,
 }
 
 #if RTS_LINKER_USE_MMAP
+
+/* -----------------------------------------------------------------------------
+   Occationally we depend on mmap'd region being close to already mmap'd regions.
+
+   Our static in-memory linker may be restricted by the architectures relocation
+   range. E.g. aarch64 has a +-4GB range for PIC code, thus we'd preferrably
+   get memory for the linker close to existing mappings.  mmap on it's own is
+   free to return any memory location, independent of what the preferred
+   location argument indicates.
+
+   For example mmap (via qemu) might give you addresses all over the available
+   memory range if the requested location is already occupied.
+
+   mmap_next will do a linear search from the start page upwards to find a
+   suitable location that is as close as possible to the locations (proivded
+   via the first argument).
+   -------------------------------------------------------------------------- */
+
+
+typedef struct _info {
+  void *addr;
+  size_t length;
+  void *next_addr;
+
+  // meta data
+  size_t count;
+  size_t total_length;
+
+  struct _info *next;
+} info;
+
+static info *infos = NULL;
+
+info *mkInfo(void *addr, size_t length) {
+  info *i = NULL;
+  i = (info *)calloc(sizeof(info), 1);
+  if (infos == NULL) {
+    infos = i;
+  } else {
+    info *last = infos;
+    while (last->next != NULL) {
+      last = last->next;
+    }
+    last->next = i;
+  }
+  i->addr = addr;
+  i->length = length;
+  i->next_addr = addr;
+
+  i->count = 0;
+  i->total_length = 0;
+
+  i->next = NULL;
+  return i;
+}
+
+info *lookupInfo(void *addr, size_t length) {
+  if (infos == NULL) {
+    return NULL;
+  }
+  for (info *cur = infos; cur != NULL; cur = cur->next) {
+    if (cur->addr == addr && cur->length == length) {
+      return cur;
+    }
+  }
+  return NULL;
+}
+
+info *lookupOrCreateInfo(void *addr, size_t length) {
+  info *i = lookupInfo(addr, length);
+  if (i == NULL) {
+    i = mkInfo(addr, length);
+  }
+  return i;
+}
+
+void printInfo(info *cur) {
+  printf("%p %8zu %p; n = %zu; total = %zu\n", cur->addr, cur->length, cur->next_addr, cur->count, cur->total_length);
+}
+void printInfos() {
+  printf("Infos:\n");
+  for (info *cur = infos; cur != NULL; cur = cur->next) {
+    printInfo(cur);
+  }
+}
+
+void*
+mmap_next(void *addr, size_t length, int prot, int flags, int fd, off_t offset, char *name) {
+  if(addr == NULL) return mmap(addr, length, prot, flags, fd, offset);
+  size_t length_ = roundUpToPage(length);
+  info *bucket = lookupOrCreateInfo(addr, length_);
+  // we are going to look for up to pageSize * 1024 * 1024 (4GB) from the
+  // address.
+  size_t pageSize = getPageSize();
+  for(int i = (uintptr_t)addr & (pageSize-1) ? 1 : 0; i < 16*1024*1024; i++) {
+
+    void *target = (void*)(((uintptr_t)(bucket->next_addr) & ~(pageSize-1))+(i*pageSize));
+    void *mem = mmap(target, length, prot, flags, fd, offset);
+    if(mem == MAP_FAILED) { return mem; }
+    if(mem == target) {
+        bucket->next_addr = mem;
+        bucket->count += 1;
+        bucket->total_length += length;
+        return mem;
+    }
+    munmap(mem, length);
+    IF_DEBUG(linker && (i % 1024 == 0),
+      debugBelch("mmap_next failed to find suitable space in %p - %p\n", addr, target));
+  }
+  printInfos();
+  barf("Failed to mmap_next for %p and size %zu for %s\n", addr, length, name);
+  return NULL;
+}
+
 //
 // Returns NULL on failure.
 //
 void *
-mmapForLinker (size_t bytes, uint32_t prot, uint32_t flags, int fd, int offset)
+mmapForLinker (size_t bytes, uint32_t prot, uint32_t flags, int fd, int offset, bool near, char * name)
 {
    void *map_addr = NULL;
    void *result;
@@ -1118,8 +1232,12 @@ mmap_again:
             debugBelch("mmapForLinker: \tflags      %#0x\n",
                        MAP_PRIVATE | tryMap32Bit | fixed | flags));
 
-   result = mmap(map_addr, size, prot,
-                 MAP_PRIVATE|tryMap32Bit|fixed|flags, fd, offset);
+   if(near) {
+    result = mmap_next(map_addr, size, prot,
+                      MAP_PRIVATE|tryMap32Bit|fixed|flags, fd, offset, name);
+   } else {
+     result = mmap(map_addr, size, prot, MAP_PRIVATE|tryMap32Bit|fixed|flags, fd, offset);
+   }
 
    if (result == MAP_FAILED) {
        sysErrorBelch("mmap %" FMT_Word " bytes at %p",(W_)size,map_addr);
@@ -1209,9 +1327,9 @@ mmap_again:
  * Map read/write pages in low memory. Returns NULL on failure.
  */
 void *
-mmapAnonForLinker (size_t bytes)
+mmapAnonForLinker (size_t bytes, bool near, char *name)
 {
-  return mmapForLinker (bytes, PROT_READ|PROT_WRITE, MAP_ANONYMOUS, -1, 0);
+  return mmapForLinker (bytes, PROT_READ|PROT_WRITE, MAP_ANONYMOUS, -1, 0, near, name);
 }
 
 void munmapForLinker (void *addr, size_t bytes, const char *caller)
@@ -1567,10 +1685,10 @@ preloadObjectFile (pathchar *path)
     * See also the misalignment logic for darwin below.
     */
 #if defined(darwin_HOST_OS)
-   image = mmapForLinker(fileSize, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd, 0);
+   image = mmapForLinker(fileSize, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd, 0, false, path);
 #else
    image = mmapForLinker(fileSize, PROT_READ|PROT_WRITE|PROT_EXEC,
-                MAP_PRIVATE, fd, 0);
+                MAP_PRIVATE, fd, 0, false, path);
 #endif
 
    if (image == MAP_FAILED) {
diff --git a/rts/LinkerInternals.h b/rts/LinkerInternals.h
index 7058ad355b..e703da7413 100644
--- a/rts/LinkerInternals.h
+++ b/rts/LinkerInternals.h
@@ -14,6 +14,7 @@
 
 #if RTS_LINKER_USE_MMAP
 #include <sys/mman.h>
+void* mmap_next(void *addr, size_t length, int prot, int flags, int fd, off_t offset, char *name);
 #endif
 
 void printLoadedObjects(void);
@@ -374,8 +375,8 @@ void exitLinker( void );
 void freeObjectCode (ObjectCode *oc);
 SymbolAddr* loadSymbol(SymbolName *lbl, RtsSymbolInfo *pinfo);
 
-void *mmapAnonForLinker (size_t bytes);
-void *mmapForLinker (size_t bytes, uint32_t prot, uint32_t flags, int fd, int offset);
+void *mmapAnonForLinker (size_t bytes, bool near, char *name);
+void *mmapForLinker (size_t bytes, uint32_t prot, uint32_t flags, int fd, int offset, bool near, char * name);
 void mmapForLinkerMarkExecutable (void *start, size_t len);
 void munmapForLinker (void *addr, size_t bytes, const char *caller);
 
diff --git a/rts/linker/Elf.c b/rts/linker/Elf.c
index f6a1754257..00425091bb 100644
--- a/rts/linker/Elf.c
+++ b/rts/linker/Elf.c
@@ -652,7 +652,7 @@ mapObjectFileSection (int fd, Elf_Word offset, Elf_Word size,
 
     pageOffset = roundDownToPage(offset);
     pageSize = roundUpToPage(offset-pageOffset+size);
-    p = mmapForLinker(pageSize, PROT_READ | PROT_WRITE, 0, fd, pageOffset);
+    p = mmapForLinker(pageSize, PROT_READ | PROT_WRITE, 0, fd, pageOffset, true, "mapObjectFileSection");
     if (p == NULL) return NULL;
     *mapped_size = pageSize;
     *mapped_offset = pageOffset;
@@ -725,7 +725,7 @@ ocGetNames_ELF ( ObjectCode* oc )
                * address might be out of range for sections that are mmaped.
                */
               alloc = SECTION_MMAP;
-              start = mmapAnonForLinker(size);
+              start = mmapAnonForLinker(size, true, "anon:SECTION_MAP");
               if (start == NULL) {
                 barf("failed to mmap memory for bss. "
                      "errno = %d", errno);
@@ -772,7 +772,7 @@ ocGetNames_ELF ( ObjectCode* oc )
           unsigned nstubs = numberOfStubsForSection(oc, i);
           unsigned stub_space = STUB_SIZE * nstubs;
 
-          void * mem = mmapAnonForLinker(size+stub_space);
+          void * mem = mmapAnonForLinker(size+stub_space, true, "anon:stub_space");
 
           if( mem == MAP_FAILED ) {
             barf("failed to mmap allocated memory to load section %d. "
@@ -881,7 +881,7 @@ ocGetNames_ELF ( ObjectCode* oc )
       }
       void * common_mem = NULL;
       if(common_size > 0) {
-          common_mem = mmapAnonForLinker(common_size);
+          common_mem = mmapAnonForLinker(common_size, true, "anon:common_mem");
           if (common_mem == NULL) {
             barf("ocGetNames_ELF: Failed to allocate memory for SHN_COMMONs");
           }
diff --git a/rts/linker/LoadArchive.c b/rts/linker/LoadArchive.c
index 041ebef4b6..de103b8eea 100644
--- a/rts/linker/LoadArchive.c
+++ b/rts/linker/LoadArchive.c
@@ -489,7 +489,7 @@ static HsInt loadArchive_ (pathchar *path)
 
 #if defined(darwin_HOST_OS) || defined(ios_HOST_OS)
             if (RTS_LINKER_USE_MMAP)
-                image = mmapAnonForLinker(memberSize);
+                image = mmapAnonForLinker(memberSize, false, "anon:image");
             else {
                 /* See loadObj() */
                 misalignment = machoGetMisalignment(f);
@@ -549,7 +549,7 @@ while reading filename from `%" PATH_FMT "'", path);
             }
             DEBUG_LOG("Found GNU-variant file index\n");
 #if RTS_LINKER_USE_MMAP
-            gnuFileIndex = mmapAnonForLinker(memberSize + 1);
+            gnuFileIndex = mmapAnonForLinker(memberSize + 1, false, "anon:loadArchive(image)");
 #else
             gnuFileIndex = stgMallocBytes(memberSize + 1, "loadArchive(image)");
 #endif
diff --git a/rts/linker/M32Alloc.c b/rts/linker/M32Alloc.c
index e7c697bf60..7fe8bbb906 100644
--- a/rts/linker/M32Alloc.c
+++ b/rts/linker/M32Alloc.c
@@ -244,7 +244,7 @@ m32_alloc_page(void)
      * pages.
      */
     const size_t pgsz = getPageSize();
-    uint8_t *chunk = mmapAnonForLinker(pgsz * M32_MAP_PAGES);
+    uint8_t *chunk = mmapAnonForLinker(pgsz * M32_MAP_PAGES, false, "anon:m32_alloc_page");
     if (chunk > (uint8_t *) 0xffffffff) {
       barf("m32_alloc_page: failed to get allocation in lower 32-bits");
     }
@@ -388,7 +388,7 @@ m32_alloc(struct m32_allocator_t *alloc, size_t size, size_t alignment)
    if (m32_is_large_object(size,alignment)) {
       // large object
       size_t alsize = ROUND_UP(sizeof(struct m32_page_t), alignment);
-      struct m32_page_t *page = mmapAnonForLinker(alsize+size);
+      struct m32_page_t *page = mmapAnonForLinker(alsize+size, false, "anon:m32_alloc");
       if (page == NULL) {
           sysErrorBelch("m32_alloc: Failed to map pages for %zd bytes", size);
           return NULL;
diff --git a/rts/linker/MachO.c b/rts/linker/MachO.c
index 1a18ee6a74..71f5ecb93e 100644
--- a/rts/linker/MachO.c
+++ b/rts/linker/MachO.c
@@ -444,7 +444,7 @@ makeGot(ObjectCode * oc) {
 
     if(got_slots > 0) {
         oc->info->got_size =  got_slots * sizeof(void*);
-        oc->info->got_start = mmapAnonForLinker(oc->info->got_size);
+        oc->info->got_start = mmapAnonForLinker(oc->info->got_size, true, "anon:makeGot");
         if( oc->info->got_start == NULL ) {
             barf("MAP_FAILED. errno=%d", errno );
             return EXIT_FAILURE;
@@ -1060,7 +1060,7 @@ ocBuildSegments_MachO(ObjectCode *oc)
         return 1;
     }
 
-    mem = mmapAnonForLinker(size_compound);
+    mem = mmapAnonForLinker(size_compound, true, "anon:BuildSegment");
     if (NULL == mem) return 0;
 
     IF_DEBUG(linker, debugBelch("ocBuildSegments: allocating %d segments\n", n_activeSegments));
@@ -1210,7 +1210,7 @@ ocGetNames_MachO(ObjectCode* oc)
                 unsigned nstubs = numberOfStubsForSection(oc, sec_idx);
                 unsigned stub_space = STUB_SIZE * nstubs;
 
-                void * mem = mmapForLinker(section->size+stub_space, PROT_READ | PROT_WRITE, MAP_ANON, -1, 0);
+                void * mem = mmapForLinker(section->size+stub_space, PROT_READ | PROT_WRITE, MAP_ANON, -1, 0, true, "PLT Stub");
 
                 if( mem == MAP_FAILED ) {
                     sysErrorBelch("failed to mmap allocated memory to load section %d. "
diff --git a/rts/linker/SymbolExtras.c b/rts/linker/SymbolExtras.c
index ddb58e4a4e..1ed6976b28 100644
--- a/rts/linker/SymbolExtras.c
+++ b/rts/linker/SymbolExtras.c
@@ -81,7 +81,7 @@ int ocAllocateExtras(ObjectCode* oc, int count, int first, int bssSize)
       // symbol_extras is aligned to a page boundary so it can be mprotect'd.
       bssSize = roundUpToPage(bssSize);
       size_t allocated_size = n + bssSize + extras_size;
-      void *new = mmapAnonForLinker(allocated_size);
+      void *new = mmapAnonForLinker(allocated_size, true, "anon:allocateExtras");
       if (new) {
           memcpy(new, oc->image, oc->fileSize);
           if (oc->imageMapped) {
diff --git a/rts/linker/elf_got.c b/rts/linker/elf_got.c
index ae75329295..6c85e6c139 100644
--- a/rts/linker/elf_got.c
+++ b/rts/linker/elf_got.c
@@ -52,7 +52,7 @@ makeGot(ObjectCode * oc) {
     }
     if(got_slots > 0) {
         oc->info->got_size = got_slots * sizeof(void *);
-        void * mem = mmapAnonForLinker(oc->info->got_size);
+        void * mem = mmapAnonForLinker(oc->info->got_size, true, "anon:oc->info->got_size");
         if (mem == NULL) {
             errorBelch("MAP_FAILED. errno=%d", errno);
             return EXIT_FAILURE;
diff --git a/rts/sm/Storage.c b/rts/sm/Storage.c
index c285c03388..0563fcd486 100644
--- a/rts/sm/Storage.c
+++ b/rts/sm/Storage.c
@@ -1809,7 +1809,7 @@ void flushExec (W_ len, AdjustorExecutable exec_addr)
 
 #if RTS_LINKER_USE_MMAP
 AdjustorWritable allocateWrite(W_ bytes) {
-    return mmapForLinker(bytes, PROT_READ | PROT_WRITE, MAP_ANONYMOUS, -1, 0);
+    return mmapForLinker(bytes, PROT_READ | PROT_WRITE, MAP_ANONYMOUS, -1, 0, true, "adjustor");
 }
 
 void markExec(W_ bytes, AdjustorWritable writ) {
